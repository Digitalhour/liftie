#!/usr/bin/env node

var program = require('commander');
var url = require('url');
var fs = require('fs');
var request = require('superagent');
var _ = require('lodash');

program
  .option('-r, --resort <resort>', 'Short name of the resort', String)
  .option('-n, --name <name>', 'Human readable name of the resort', String)
  .option('-u, --url <url>', 'URL of the resort lift status page', String)
  .parse(process.argv);

function params(resort, name, statusUrl) {
  if(!resort) {
    program.prompt('Short name of the resort [acme]: ', function(resort) {
      params(resort || 'acme', name, statusUrl);
    });
    return;
  }
  if (!name) {
    program.prompt('Human readable name of the resort [Acme Ski]: ', function(name) {
      params(resort, name || 'Acme Ski', statusUrl);
    });
    return;
  }
  if (!statusUrl) {
    program.prompt('URL of the page with lift status [http://acme.com/lift/status]: ', function(statusUrl) {
      params(resort, name, statusUrl || 'http://acme.com/lift/status');
    });
    return;
  }

  var resortUrl = url.parse(statusUrl);
  process.stdin.destroy();
  generate({
    id: resort,
    name: name,
    host: [resortUrl.protocol, '//', resortUrl.host].join(''),
    pathname: [resortUrl.pathname, resortUrl.search, resortUrl.hash].join('')
  });
}

function resolve(path) {
  return fs.realpathSync(__dirname + '/' + path);
}

function generate(resort) {
  console.log('Generating files for %s', resort.name);
  var templates = resolve('../templates'),
    lib = resolve('../lib/resorts'),
    test = resolve('../test/resorts');

  copy(templates + '/resort.js', lib + '/' + resort.id + '.js', resort);
  copy(templates + '/test.js', test + '/' + resort.id + '.js', resort);
  curl(resort.host + resort.pathname, test + '/example/' + resort.id + '.html');
}

function copy(src, dst, params) {
  console.log('Generating %s...', dst);
  fs.readFile(src, 'utf8', function(err, data) {
    data = _.template(data, params);
    fs.writeFile(dst, data);
  });
}

function curl(url, dst) {
  var dstStream = fs.createWriteStream(dst);
  console.log('Retrieving %s to %s...', url, dst);
  request.get(url).pipe(dstStream);
}

params(program.resort, program.name, program.url);
