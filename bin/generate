#!/usr/bin/env node

var program = require('commander');
var prompt = require('prompt');
var url = require('url');
var fs = require('fs');
var path = require('path');
var request = require('superagent');
var template = require('lodash').template;

program
  .option('-r, --resort <resort>', 'Short name of the resort', String)
  .option('-n, --name <name>', 'Human readable name of the resort', String)
  .option('-u, --url <url>', 'URL of the resort lift status page', String)
  .parse(process.argv);

var conf = {
  id: program.resort,
  name: program.name,
  url: program.url
};

prompt.override = conf;

var schema = [
  {
    name: 'id',
    description: 'Short name of the resort [acme]',
    type: 'string',
    required: true
  },
  {
    name: 'name',
    description: 'Human readable name of the resort [Acme Ski]',
    type: 'string',
    required: true
  },
  {
    name: 'url',
    description: 'URL of the page with lift status [http://acme.com/lift/status]',
    type: 'string',
    required: true
  },
  {
    name: 'tags',
    description: 'Comma separated list of tags [Colorado, Vail, New Hampshire]',
    type: 'string',
    default: ''
  },
  {
    name: 'twitter',
    description: 'Twitter handle (without @) [acme]',
    type: 'string'
  },
  {
    name: 'coordinates',
    description: 'Resort location [latitude, longitude]',
    type: 'string',
    default: ''
  }
];

function generate(resort) {
  console.log('Generating files for %s', resort.name);
  var templates = path.resolve(__dirname, '../templates'),
    lib = path.resolve(__dirname, '../lib/resorts'),
    test = path.resolve(__dirname, '../test/resorts'),
    resortDir = path.join(lib, resort.id),
    json;

  fs.mkdirSync(resortDir);
  copy(path.join(templates, 'index.js'), path.join(resortDir, 'index.js'), resort);
  json = {
    name: resort.name,
    url: {
      host: resort.host,
      pathname: resort.pathname
    },
    tags: resort.tags,
    ll: resort.coordinates
  };
  if (resort.twitter) {
    json.twitter = resort.twitter;
  }
  write(path.join(resortDir, 'resort.json'), json);
  copy(path.join(templates, 'test.js'), path.join(test, resort.id + '.js'), resort);
  curl(resort.host + resort.pathname, path.join(test, 'example', resort.id + '.html'));
}


function write(dst, json) {
  console.log('Generating %s...', dst);
  fs.writeFile(dst, JSON.stringify(json, null, 2));
}

function copy(src, dst, params) {
  console.log('Generating %s...', dst);
  fs.readFile(src, 'utf8', function(err, data) {
    data = template(data, params);
    fs.writeFile(dst, data);
  });
}

function curl(url, dst) {
  var dstStream = fs.createWriteStream(dst);
  console.log('Retrieving %s to %s...', url, dst);
  request.get(url).pipe(dstStream);
}

prompt.addProperties(conf, schema, function(err) {
  if (err) {
    console.error(err);
    process.exit(-1);
  }
  var resortUrl = url.parse(conf.url);

  conf.tags = conf.tags.split(/\s*,\s*/);
  conf.coordinates = conf.coordinates.split(/\s*,\s*/).map(parseFloat);
  conf.host = [resortUrl.protocol, '//', resortUrl.host].join('');
  conf.pathname = [resortUrl.pathname, resortUrl.search, resortUrl.hash].join('');
  process.stdin.destroy();
  generate(conf);
});


